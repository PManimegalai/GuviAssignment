# -*- coding: utf-8 -*-
"""Copy of 6_3_Python_Assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ICTHDf_EO-J9_2wHpeqFB_DO2g4xu4Zf

<h1>Python: without numpy or sklearn </h1>

<h3> Q1: Given two matrices please print the product of those two matrices </h3>
<pre>

Ex 1: A   = [[1 3 4]
             [2 5 7]
             [5 9 6]]
      B   = [[1 0 0]
             [0 1 0]
             [0 0 1]]
      A*B = [[1 3 4]
             [2 5 7]
             [5 9 6]]

     
Ex 2: A   = [[1 2]
             [3 4]]
      B   = [[1 2 3 4 5]
             [5 6 7 8 9]]
      A*B = [[11 14 17 20 23]
             [23 30 37 44 51]]
             
Ex 3: A   = [[1 2]
             [3 4]]
      B   = [[1 4]
             [5 6]
             [7 8]
             [9 6]]
      A*B =Not possible
</pre>
"""

print("Matrix Multiplication")
print("Ex. 1 , 2, 3:")
print("Enter order of 1st matrix:")
m,n = list(map(int,input().split()))
print("Enter Row wise values")
# empty list for 1st matrix
mat1 = []
# row wise insertion in the matrix
for i in range(m):
  print("Enter row",i,"value:")
  row = list(map(int,input().split()))
  mat1.append(row)
print("Enter order of 2nd matrix:")
p,q = list(map(int,input().split()))
print("Enter Row wise values")
# empty list for 2nd matrix
mat2 = []
# row wise insertion in the matrix
for j in range(p):
  print("Enter row",j,"value:")
  row = list(map(int,input().split()))
  mat2.append(row)
print("Matrix 1:",mat1)
print("Matrix 2:",mat2)
resultant = []
# create a 0-matrix of order m x q
for i in range(m):
  row = []
  for j in range(q):
    row.append(0)
  resultant.append(row)
print("Matrix Multiplication: ")
# perform matrix multiplication
# using nested for loops
for i in range(m):
  for j in range(q):
    for k in range(n):
      resultant[i][j] += mat1[i][k] * mat2[k][j]
for row in resultant:
  print(row)

"""<h3> Q2: Replace the digits in the string with #</h3>

consider a string that will have digits in that, we need to remove all the not digits and replace the digits with #
<pre>
Ex 1: A = 234                Output: ###
Ex 2: A = a2b3c4             Output: ###
Ex 3: A = abc                Output:   (empty string)
Ex 5: A = #2a$#b%c%561#      Output: ####
</pre>
"""

import re
# write your python code here
# you can take the above example as sample input for your program to test
# it should work for any general input try not to hard code for only given input examples
# try to complete this question using regular expressions
# you can free to change all these codes/structure
# String: it will be the input to your program
# https://www.w3schools.com/python/python_regex.asp

def replace_digits(String):
    # write your code
    # 
    return() # modified string which is after replacing the # with digits

A='#2a$#b%c%561#'
print("The original value:" +str(A))
K='#'
digits="0123456789"
for ele in A:
  if ele in digits:
    A=A.replace(ele,K)
print("The resultant String: " +str(A))

import re
def replace_digits_and_remove_all_non_digits(str):
    replacements = [
        ('\D', '',),
        ('\d', '#'),
    ]
    for old, new in replacements:
        str = re.sub(old, new, str)
    return str
s1 = "234"
s2 = "a2b3c4"
s3 = 'abc'
s4 = '#2a$#b%c%561#'
print(replace_digits_and_remove_all_non_digits(s1))
print(replace_digits_and_remove_all_non_digits(s2))
print(replace_digits_and_remove_all_non_digits(s3))
print(replace_digits_and_remove_all_non_digits(s4))

"""<h3> Q3: Filling the missing values in the specified formate</h3>
You will be given a string with digits and '\_'(missing value) symbols you have to replace the '\_' symbols as explained 
<pre>
Ex 1: _, _, _, 24 ==> 24/4, 24/4, 24/4, 24/4 i.e we. have distributed the 24 equally to all 4 places <br>
Ex 2: 40, _, _, _, 60 ==> (60+40)/5,(60+40)/5,(60+40)/5,(60+40)/5,(60+40)/5 ==> 20, 20, 20, 20, 20 i.e. the sum of (60+40) is distributed qually to all 5 places<br>
Ex 3: 80, _, _, _, _  ==> 80/5,80/5,80/5,80/5,80/5 ==> 16, 16, 16, 16, 16 i.e. the 80 is distributed qually to all 5 missing values that are right to it<br>
Ex 4: _, _, 30, _, _, _, 50, _, _  
==> we will fill the missing values from left to right 
    a. first we will distribute the 30 to left two missing values (10, 10, 10, _, _, _, 50, _, _)
    b. now distribute the sum (10+50) missing values in between (10, 10, 12, 12, 12, 12, 12, _, _) 
    c. now we will distribute 12 to right side missing values (10, 10, 12, 12, 12, 12, 4, 4, 4)
</pre>
for a given string with comma seprate values, which will have both missing values numbers like ex: "_, _, x, _, _, _"
you need fill the missing values

Q: your program reads a string like ex: "_, _, x, _, _, _" and returns the filled sequence

Ex: 
<pre>
Input1: "_,_,_,24"
Output1: 6,6,6,6

Input2: "40,_,_,_,60"
Output2: 20,20,20,20,20

Input3: "80,_,_,_,_"
Output3: 16,16,16,16,16

Input4: "_,_,30,_,_,_,50,_,_"
Output4: 10,10,12,12,12,12,4,4,4

</pre>


"""

# write your python code here
# you can take the above example as sample input for your program to test
# it should work for any general input try not to hard code for only given input strings
#run your code in the function for each of the inputs mentioned above and make sure that you get the same results

# you can free to change all these codes/structure
def curve_smoothing(string):
    # your code
    return #list of values

def curve_smoothing(string):
    index_of_non_empty_cells_list = []
    split_string = string.split(',')
    for idx in range(len(split_string)):
        if split_string[idx] != '_':
            index_of_non_empty_cells_list.append(idx)
    index_of_non_empty_cells_list.append(len(split_string) - 1)

    print(index_of_non_empty_cells_list)
    position_to_start = 0

    for element in index_of_non_empty_cells_list:
        cumulative_sum_prev_and_next_value = int(split_string[element]) if split_string[element] != '_' else 0
        cumulative_sum_prev_and_next_value += int(split_string[position_to_start]) if split_string[position_to_start] != '_' and position_to_start != element else 0
        integer_to_replace_each_previous_empty_cell = cumulative_sum_prev_and_next_value // (
                element - position_to_start + 1)
        split_string = [
            integer_to_replace_each_previous_empty_cell if position_to_start <= x <= element else split_string[x] for x
            in range(len(split_string))]
        position_to_start = element
    return split_string
S = "80,_,_,_,_"
ans = smoothed_values = curve_smoothing(S)
print(ans)

"""<h3> Q4: Given two sentances S1, S2</h3>
You will be given two sentances S1, S2 your task is to find 
<pre>
a. Number of common words between S1, S2
b. Words in S1 but not in S2
c. Words in S2 but not in S1
</pre>

Ex: 
<pre>
S1= "the first column F will contain only 5 uniques values"
S2= "the second column S will contain only 3 uniques values"
Output:
a. 7
b. ['first','F','5']
c. ['second','S','3']
</pre>
"""

class Solution:
   def solve(self, s0, s1):
      s0 = s0.lower()
      s1 = s1.lower()
      s0List = s0.split(" ")
      s1List = s1.split(" ")
      return len(list(set(s0List)&set(s1List)))
ob = Solution()
S1 = "the first column F will contain only 5 uniques values"
S2 = "the second column S will contain only 3 uniques values"
print(ob.solve(S1,S2))

def UncommonWords(A, B):
  A=A.split()
  B=B.split()
  x=[]
  for i in A:
    if i not in B:
      x.append(i)
      for i in B:
        if i not in A:
          x.append(i)
          x=list(set(x))
          return x
# Driver Code
A = "the first column F will contain only 5 uniques values"
B = "the second column S will contain only 3 uniques values"
# Print required answer
print(UncommonWords(A, B))

